include ../mixins.pug

h1 Security
+para('Vokabular: ')
    ul
    li
        strong Vulnerability
        | : Verwundbarkeit
    li
        strong Attack Vector (AV)
        | : Angriffsvorgehen
    li
        strong Malicious Code
        | : Angriffcode, Schadcode
    li
        strong Injection Attack
        | : Code wird System zur Ausführung untergeschoben
    li
        strong XSS: Cross Site Scripting
        | : Im Browser des Opfers wird eingeschleustes JS ausgeführt

+para('XSS Mitigation: ')
    ul
    li
        strong Input Sanitization
        | : Bereinigung von UserInput, 
        i
        | do not implement your own
        | sanitization
    li
        strong CSP
        | : Content Security Policy im Header setzen (e.g. nur Secure Domain + REST Service darf
        |             kontaktiert werden)
    li
        strong HTTPOnly Flag
        |  bei Cookies setzen

+para('JS Code Injection Mitigation: ')
    ul
    li
        strong KEINE
        |  Verwendung von eval, setTimeOut, setInterval, besser parseInt + JSON.parse nutzen
    li
        strong Reduzieren
        | : Global Scopes und Variablen
    li
        strong Node
        |  nicht als root process starten; x-powered-by header information abbestellen

+para('Broken Authentication: ')
    ul
    li
        strong Vulnerability
        | : PW oder Token wird unverschlüsselt übertragen
    li
        strong AV
        | : Network Sniffing Software
    li
        strong Mitigation
        | : TLS, Auth-Service, 
        i PW-based Auth nicht selbst implementieren
        | , keine
        |             geheimen Informationen in Query params
    br
    li
        strong Vulnerability
        | : Session Timeout zu lange
    li
        strong AV
        | : Opfer nutzt public PC, vergisst Logout
    li
        strong Mitigation
        | : Session Timeout sinnvoll setzen
    br
    li
        strong Vulnerability
        | : CSRF, Formular + POST handler nicht geschützt, es wird nicht sichergestellt,
        |             dass das form vom Server generiert wurde
    li
        strong AV
        | : Attacker brint Opfer dazu mit gültiger Session auf Seite mit gefälschtem form zu gehen
        |             & zu submitten
    li
        strong Mitigation
        | : forms mit CSRF Token versehen, Gültigkeit wird bei POST Req geprüft | in
        |             Express mit csurf lib:
        pre.code
            code.language-javascript
                |const csrf = require("csurf"); app.use(csrf({cooke: true}));

+para('Broken Access Control: ')
    ul
    li
        strong Vulnerability
        | : User-ID ist nur über URL codiert
    li
        strong AV
        | : Attacker loggt sich ein & verändert URL
    li
        strong Mitigation
        | : bei Anzeige von Seiten sicherstellen, dass aktuell eingeloggter User berechtigt
        |             ist
    br
    li
        strong Vulnerability
        | : Replay Attack
    li
        strong AV
        | : Erneutes Senden von Formularen ist möglich & werden mehrfach verarbeitet
    li
        strong Mitigation
        | : One-Time CSRF Token

+para('Passwordless Login: ')
    | Nutzer erhalten (one-time) "magic-link" per EMail, Code genügend lange dass Brute-Force attacks verhindert sind

+para('Should I operate my own password-based Auth-Service? ')
img(src='./assets/AuthServiceDesicionTree.PNG' alt='AuthServiceDesicionTree')

+para('How to keep Express Apps secure: ')
    ul
    li Enable TSL / SSL | Check for known vulnerabilities
    li encode all untrusted data sent to an application (HTML, CSS, JS, URL)
    li Test for parameter pollution (ensure that app can handle array values for form query-parameters)
    li Add Helmet to set sane defaults | Use CSURF against CSRF | Use Safe-Regex
    li Don't use the default session cookie name, use generic cookie names

+para('Helmet: ')
    span
        | 11 security modules preventing a variety of attacks against an Express application
    ul
    li
        strong helmet-csp
        | : enables content-security-policy HTTP header, defines the trusted origins of
        |             contents (scripts, images, etc.)
    li
        strong dns-prefetch-control
        | : DNS Prefetching = speeding up loading times, disabling it can limit
        |             potential data leakage about types of service an application uses
    li
        strong frameguard
        | : enables X-Frame-Options HTTP header, website cannot render another site
    li
        strong hpkp
        | : enables public key pinning headers, prevent man-in-the-middle attchs with fored certs
    li
        strong hsts
        | : enables strict-transport-security header which forces subsequent connections to the
        |             server to use HTTPS once a client has initially connected with HTTPS
    li
        strong ienoopen
        | : enables the x-download-options HTTP header with the configuration of noopen to
        |             prevent IE users from executing downloads within an app's context
    li
        strong nocache
        | : enables four HTTP headers: cache-control, pragma, expires, surrogate-control with
        |             defaults that block the client caching old versions of site resources
    li
        strong dont-sniff-mimetype
        | : enables the x-content-type-options HTTP header to stop clients from
        |             sniffing the MIME-type of a response outside of the content-type that is declared
    li
        strong referrer-policy
        | : allows for control over the referrer HTTP header from your application,
        |             allowing no referrer information, referrer information for the same origin or full referrer information
    li
        strong x-xss-protection
        | : enables the X-XSS-Protection HTTP header preventing some XSS attacks in
        |             modern browsers